{
  "version": 3,
  "sources": ["../src/components/Toast.tsx", "../src/components/ToastManager.tsx", "../src/core/toast.ts"],
  "sourcesContent": ["import React, { useState, useEffect } from 'react';\n\n/**\n * Defines the visual style and semantic meaning of the toast notification\n */\nexport type ToastType = 'success' | 'error' | 'warning' | 'info';\n\n/**\n * Configuration options for the Toast component\n */\nexport interface ToastProps {\n  /** \n   * Visual style and semantic type of the toast\n   * @default 'info'\n   */\n  type?: ToastType;\n  \n  /** \n   * Optional title displayed above the message in bold\n   * @example \"Success!\" or \"Error occurred\"\n   */\n  title?: string;\n  \n  /** \n   * Main message content of the toast notification\n   * @example \"Your changes have been saved successfully\"\n   */\n  message: string;\n  \n  /** \n   * Auto-close duration in milliseconds (only applies if autoClose is true)\n   * @default 5000\n   */\n  duration?: number;\n  \n  /** \n   * Whether to show the close (\u00D7) button\n   * @default true\n   */\n  showCloseButton?: boolean;\n  \n  /** \n   * Callback function triggered when the toast is closed (either manually or automatically)\n   */\n  onClose?: () => void;\n  \n  /** \n   * Additional CSS classes to apply to the toast container\n   */\n  className?: string;\n  \n  /** \n   * Whether the toast should automatically close after the specified duration\n   * @default true\n   */\n  autoClose?: boolean;\n}\n\n/**\n * Toast notification component for displaying temporary messages to users\n * \n * Features:\n * - Four built-in types with appropriate styling (success, error, warning, info)\n * - Automatic closing with customizable duration\n * - Manual close button option\n * - Smooth slide-in/slide-out animations\n * - Accessible with proper ARIA labels\n * - Fully customizable styling\n * \n * @example\n * // Basic usage\n * <Toast message=\"Operation completed successfully!\" />\n * \n * @example\n * // Success toast with title and custom duration\n * <Toast\n *   type=\"success\"\n *   title=\"Success!\"\n *   message=\"Your profile has been updated.\"\n *   duration={3000}\n *   onClose={() => console.log('Toast closed')}\n * />\n * \n * @example\n * // Error toast that doesn't auto-close\n * <Toast\n *   type=\"error\"\n *   title=\"Connection Error\"\n *   message=\"Failed to connect to the server. Please check your internet connection.\"\n *   autoClose={false}\n * />\n * \n * @example\n * // Warning toast with custom styling\n * <Toast\n *   type=\"warning\"\n *   message=\"Your session will expire in 5 minutes\"\n *   className=\"!max-w-lg\"\n *   showCloseButton={false}\n * />\n */\nexport const Toast: React.FC<ToastProps> = ({\n  type = 'info',\n  title,\n  message,\n  duration = 5000,\n  showCloseButton = true,\n  onClose,\n  className = '',\n  autoClose = true,\n}) => {\n  const [isVisible, setIsVisible] = useState(true);\n\n  useEffect(() => {\n    if (autoClose && duration > 0) {\n      const timer = setTimeout(() => {\n        setIsVisible(false);\n        // Wait for exit animation before calling onClose\n        setTimeout(() => onClose?.(), 300);\n      }, duration);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [autoClose, duration, onClose]);\n\n  /**\n   * Handles manual closing of the toast with animation\n   */\n  const handleClose = () => {\n    setIsVisible(false);\n    setTimeout(() => onClose?.(), 300);\n  };\n\n  /**\n   * Returns the appropriate Tailwind CSS classes based on toast type\n   */\n  const getTypeStyles = () => {\n    const styles = {\n      success: 'bg-green-50 border-green-200 text-green-800',\n      error: 'bg-red-50 border-red-200 text-red-800',\n      warning: 'bg-yellow-50 border-yellow-200 text-yellow-800',\n      info: 'bg-blue-50 border-blue-200 text-blue-800'\n    };\n    return styles[type];\n  };\n\n  /**\n   * Returns the appropriate icon element based on toast type\n   */\n  const getIcon = () => {\n    const iconBase = 'w-5 h-5 rounded-full flex items-center justify-center text-white text-xs font-bold flex-shrink-0';\n    \n    switch (type) {\n      case 'success':\n        return <div className={`${iconBase} bg-green-500`}>\u2713</div>;\n      case 'error':\n        return <div className={`${iconBase} bg-red-500`}>\u00D7</div>;\n      case 'warning':\n        return <div className={`${iconBase} bg-yellow-500`}>!</div>;\n      case 'info':\n        return <div className={`${iconBase} bg-blue-500`}>i</div>;\n    }\n  };\n\n  const baseClasses = `\n    transform transition-all duration-300 ease-in-out\n    border-l-4 rounded-md shadow-md p-4 mb-4 min-w-80 max-w-md\n    ${isVisible ? 'translate-x-0 opacity-100' : 'translate-x-full opacity-0'}\n    ${getTypeStyles()}\n    ${className}\n  `.replace(/\\s+/g, ' ').trim();\n\n  return (\n    <div className={baseClasses}>\n      <div className=\"flex items-start gap-3\">\n        {getIcon()}\n        <div className=\"flex-1 min-w-0\">\n          {title && (\n            <h4 className=\"font-semibold text-sm leading-5 mb-1\">\n              {title}\n            </h4>\n          )}\n          <p className=\"text-sm leading-5\">\n            {message}\n          </p>\n        </div>\n        {showCloseButton && (\n          <button\n            onClick={handleClose}\n            className=\"ml-2 text-gray-400 hover:text-gray-600 transition-colors p-1 -mr-1 -mt-1\"\n            aria-label=\"Close notification\"\n          >\n            <svg className=\"w-4 h-4\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\" />\n            </svg>\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\n/**\n * Usage Examples and Best Practices:\n * \n * 1. Basic Notification:\n *    <Toast message=\"Settings saved!\" />\n * \n * 2. Success with callback:\n *    <Toast\n *      type=\"success\"\n *      title=\"Upload Complete\"\n *      message=\"Your file has been uploaded successfully.\"\n *      onClose={() => setShowToast(false)}\n *    />\n * \n * 3. Error that requires user action:\n *    <Toast\n *      type=\"error\"\n *      title=\"Validation Error\"\n *      message=\"Please fill in all required fields before submitting.\"\n *      autoClose={false}\n *    />\n * \n * 4. Custom styling:\n *    <Toast\n *      type=\"info\"\n *      message=\"New features available!\"\n *      className=\"!bg-purple-50 !border-purple-200 !text-purple-800\"\n *    />\n * \n * 5. Integration with toast manager:\n *    const showToast = (type, message) => {\n *      setToasts(prev => [...prev, { id: Date.now(), type, message }]);\n *    };\n * \n * Accessibility Notes:\n * - Uses proper ARIA labels for screen readers\n * - Keyboard accessible close button\n * - Sufficient color contrast for all variants\n * - Semantic HTML structure\n * \n * Styling Notes:\n * - Uses Tailwind CSS utility classes\n * - Responsive design (min-width: 20rem, max-width: 28rem)\n * - Smooth CSS transitions for show/hide animations\n * - Consistent spacing and typography\n */", "// components/ToastManager.tsx\nimport React, { useEffect, useState } from 'react';\nimport { Toast, ToastProps } from './Toast';\n\nexport interface ToastItem extends ToastProps {\n  id: number;\n}\n\nexport let pushToast: (toast: Omit<ToastProps, 'id'>) => void = () => {};\n\nexport const ToastManager: React.FC = () => {\n  const [toasts, setToasts] = useState<ToastItem[]>([]);\n\n  useEffect(() => {\n    pushToast = (toast: Omit<ToastProps, 'id'>) => {\n      const id = Date.now() + Math.random();\n      setToasts((prev) => [...prev, { ...toast, id }]);\n    };\n  }, []);\n\n  const removeToast = (id: number) => {\n    setToasts((prev) => prev.filter((t) => t.id !== id));\n  };\n\n  return (\n    <div className=\"fixed top-4 right-4 z-50 flex flex-col gap-3 items-end pointer-events-none\">\n      {toasts.map(({ id, ...props }) => (\n        <Toast\n          key={id}\n          {...props}\n          onClose={() => {\n            props.onClose?.();\n            removeToast(id);\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n", "// core/toast.ts\nimport { ToastProps } from '../components/Toast';\nimport { pushToast } from '../components/ToastManager';\n\nexport const toast = {\n  show: (toast: Omit<ToastProps, 'id'>) => pushToast(toast),\n  success: (message: string, opts?: Partial<Omit<ToastProps, 'message' | 'type'>>) =>\n    pushToast({ ...opts, message, type: 'success' }),\n  error: (message: string, opts?: Partial<Omit<ToastProps, 'message' | 'type'>>) =>\n    pushToast({ ...opts, message, type: 'error' }),\n  warning: (message: string, opts?: Partial<Omit<ToastProps, 'message' | 'type'>>) =>\n    pushToast({ ...opts, message, type: 'warning' }),\n  info: (message: string, opts?: Partial<Omit<ToastProps, 'message' | 'type'>>) =>\n    pushToast({ ...opts, message, type: 'info' }),\n};\n"],
  "mappings": "AAAA,OAAgB,YAAAA,EAAU,aAAAC,MAAiB,QA0J5B,cAAAC,EAsBP,QAAAC,MAtBO,oBArDR,IAAMC,EAA8B,CAAC,CAC1C,KAAAC,EAAO,OACP,MAAAC,EACA,QAAAC,EACA,SAAAC,EAAW,IACX,gBAAAC,EAAkB,GAClB,QAAAC,EACA,UAAAC,EAAY,GACZ,UAAAC,EAAY,EACd,IAAM,CACJ,GAAM,CAACC,EAAWC,CAAY,EAAId,EAAS,EAAI,EAE/CC,EAAU,IAAM,CACd,GAAIW,GAAaJ,EAAW,EAAG,CAC7B,IAAMO,EAAQ,WAAW,IAAM,CAC7BD,EAAa,EAAK,EAElB,WAAW,IAAMJ,IAAU,EAAG,GAAG,CACnC,EAAGF,CAAQ,EAEX,MAAO,IAAM,aAAaO,CAAK,CACjC,CACF,EAAG,CAACH,EAAWJ,EAAUE,CAAO,CAAC,EAKjC,IAAMM,EAAc,IAAM,CACxBF,EAAa,EAAK,EAClB,WAAW,IAAMJ,IAAU,EAAG,GAAG,CACnC,EAKMO,EAAgB,KACL,CACb,QAAS,8CACT,MAAO,wCACP,QAAS,iDACT,KAAM,0CACR,GACcZ,CAAI,EAMda,EAAU,IAAM,CACpB,IAAMC,EAAW,mGAEjB,OAAQd,EAAM,CACZ,IAAK,UACH,OAAOH,EAAC,OAAI,UAAW,GAAGiB,CAAQ,gBAAiB,kBAAC,EACtD,IAAK,QACH,OAAOjB,EAAC,OAAI,UAAW,GAAGiB,CAAQ,cAAe,gBAAC,EACpD,IAAK,UACH,OAAOjB,EAAC,OAAI,UAAW,GAAGiB,CAAQ,iBAAkB,aAAC,EACvD,IAAK,OACH,OAAOjB,EAAC,OAAI,UAAW,GAAGiB,CAAQ,eAAgB,aAAC,CACvD,CACF,EAEMC,EAAc;AAAA;AAAA;AAAA,MAGhBP,EAAY,4BAA8B,4BAA4B;AAAA,MACtEI,EAAc,CAAC;AAAA,MACfN,CAAS;AAAA,IACX,QAAQ,OAAQ,GAAG,EAAE,KAAK,EAE5B,OACET,EAAC,OAAI,UAAWkB,EACd,SAAAjB,EAAC,OAAI,UAAU,yBACZ,UAAAe,EAAQ,EACTf,EAAC,OAAI,UAAU,iBACZ,UAAAG,GACCJ,EAAC,MAAG,UAAU,uCACX,SAAAI,EACH,EAEFJ,EAAC,KAAE,UAAU,oBACV,SAAAK,EACH,GACF,EACCE,GACCP,EAAC,UACC,QAASc,EACT,UAAU,2EACV,aAAW,qBAEX,SAAAd,EAAC,OAAI,UAAU,UAAU,KAAK,eAAe,QAAQ,YACnD,SAAAA,EAAC,QAAK,SAAS,UAAU,EAAE,qMAAqM,SAAS,UAAU,EACrP,EACF,GAEJ,EACF,CAEJ,ECvMA,OAAgB,aAAAmB,EAAW,YAAAC,MAAgB,QA0BnC,cAAAC,MAAA,oBAnBD,IAAIC,EAAqD,IAAM,CAAC,EAE1DC,EAAyB,IAAM,CAC1C,GAAM,CAACC,EAAQC,CAAS,EAAIC,EAAsB,CAAC,CAAC,EAEpDC,EAAU,IAAM,CACdL,EAAaM,GAAkC,CAC7C,IAAMC,EAAK,KAAK,IAAI,EAAI,KAAK,OAAO,EACpCJ,EAAWK,GAAS,CAAC,GAAGA,EAAM,CAAE,GAAGF,EAAO,GAAAC,CAAG,CAAC,CAAC,CACjD,CACF,EAAG,CAAC,CAAC,EAEL,IAAME,EAAeF,GAAe,CAClCJ,EAAWK,GAASA,EAAK,OAAQE,GAAMA,EAAE,KAAOH,CAAE,CAAC,CACrD,EAEA,OACER,EAAC,OAAI,UAAU,6EACZ,SAAAG,EAAO,IAAI,CAAC,CAAE,GAAAK,EAAI,GAAGI,CAAM,IAC1BZ,EAACa,EAAA,CAEE,GAAGD,EACJ,QAAS,IAAM,CACbA,EAAM,UAAU,EAChBF,EAAYF,CAAE,CAChB,GALKA,CAMP,CACD,EACH,CAEJ,EClCO,IAAMM,EAAQ,CACnB,KAAOA,GAAkCC,EAAUD,CAAK,EACxD,QAAS,CAACE,EAAiBC,IACzBF,EAAU,CAAE,GAAGE,EAAM,QAAAD,EAAS,KAAM,SAAU,CAAC,EACjD,MAAO,CAACA,EAAiBC,IACvBF,EAAU,CAAE,GAAGE,EAAM,QAAAD,EAAS,KAAM,OAAQ,CAAC,EAC/C,QAAS,CAACA,EAAiBC,IACzBF,EAAU,CAAE,GAAGE,EAAM,QAAAD,EAAS,KAAM,SAAU,CAAC,EACjD,KAAM,CAACA,EAAiBC,IACtBF,EAAU,CAAE,GAAGE,EAAM,QAAAD,EAAS,KAAM,MAAO,CAAC,CAChD",
  "names": ["useState", "useEffect", "jsx", "jsxs", "Toast", "type", "title", "message", "duration", "showCloseButton", "onClose", "className", "autoClose", "isVisible", "setIsVisible", "timer", "handleClose", "getTypeStyles", "getIcon", "iconBase", "baseClasses", "useEffect", "useState", "jsx", "pushToast", "ToastManager", "toasts", "setToasts", "useState", "useEffect", "toast", "id", "prev", "removeToast", "t", "props", "Toast", "toast", "pushToast", "message", "opts"]
}
